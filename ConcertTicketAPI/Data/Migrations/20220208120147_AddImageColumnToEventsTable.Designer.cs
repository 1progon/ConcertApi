// <auto-generated />
using System;
using ConcertTicketAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace ConcertTicketAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220208120147_AddImageColumnToEventsTable")]
    partial class AddImageColumnToEventsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<long?>("LikesCount")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocationCityId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationCityId");

                    b.HasIndex("LocationCountryId");

                    b.HasIndex("PersonId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("InHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventsLike", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EventLikes");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventsTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("EventsTags");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("EventSubCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Iata")
                        .HasColumnType("text");

                    b.Property<bool>("IsCountryCapital")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStateCapital")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Popular")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StateId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("TimeZoneId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("StateId", "Slug");

                    b.HasIndex("Slug");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("LocationCities");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Iso2Code")
                        .HasColumnType("char(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Popular")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("LocationCountries");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(6)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("LocationStates");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(255)");

                    b.Property<NpgsqlPoint?>("Coordinates")
                        .HasColumnType("point");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UtcDstOffset")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.EventPerformerMiddle", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("EventPerformerMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.EventTagMiddle", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTagMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonEventFavoritesMiddle", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEventFavoritesMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonEventFollowingsMiddle", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEventFollowingsMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonPerformerFavoritesMiddle", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("PersonPerformerFavoritesMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonPerformerFollowingMiddle", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("PersonPerformerFollowingMiddle");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Article")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<long?>("Likes")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Popular")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("InHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("PerformerCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerformerId");

                    b.ToTable("PerformerImages");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("PerformerSubCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseLetter")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TokenExpire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.PersonCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<long?>("Likes")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCompanies");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.PersonCompaniesImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<int>("PersonCompaniesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonCompaniesId");

                    b.ToTable("PersonCompaniesImages");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Phone.CountryPhoneCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Format")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("PhoneCodesCountries");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Article")
                        .HasColumnType("text");

                    b.Property<string>("Capacity")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyOwnerId")
                        .HasColumnType("integer");

                    b.Property<NpgsqlPoint?>("Coordinates")
                        .HasColumnType("point");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HouseLetter")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("NearWater")
                        .HasColumnType("boolean");

                    b.Property<DateOnly?>("Opened")
                        .HasColumnType("date");

                    b.Property<string>("OtherPhones")
                        .HasColumnType("text");

                    b.Property<int?>("PersonOwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone1")
                        .HasColumnType("text");

                    b.Property<string>("Phone2")
                        .HasColumnType("text");

                    b.Property<string>("Phone3")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("SquareSize")
                        .HasColumnType("real");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyOwnerId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PersonOwnerId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueImages");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueParking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.Property<string>("Zone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("VenueId");

                    b.ToTable("Parking");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PerformerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Seat")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VenueZonesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("VenueZonesId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueWorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("LunchBreak")
                        .HasColumnType("interval");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("WorkTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueWorkTimes");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueZones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TicketsCount")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueZones");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.Event", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Person.PersonCompanies", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCity", null)
                        .WithMany("Events")
                        .HasForeignKey("LocationCityId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", null)
                        .WithMany("Events")
                        .HasForeignKey("LocationCountryId");

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("Events")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConcertTicketAPI.Models.Event.EventSubCategory", "SubCategory")
                        .WithMany("Events")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Venue.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("SubCategory");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventImages", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventsLike", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("Likes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventSubCategory", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.EventCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationCity", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationState", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Location.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId");

                    b.Navigation("State");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationState", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.TimeZone", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.EventPerformerMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("EventPerformers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", "Performer")
                        .WithMany("EventPerformers")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.EventTagMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("EventTagMiddles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Event.EventsTag", "Tag")
                        .WithMany("EventTagMiddles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonEventFavoritesMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("PersonEventFavorites")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("PersonEventFavorites")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonEventFollowingsMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("PersonEventFollowings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("PersonEventFollowings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonPerformerFavoritesMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", "Performer")
                        .WithMany("PersonPerformerFavorites")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("PersonPerformerFavorites")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Middle.PersonPerformerFollowingMiddle", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", "Performer")
                        .WithMany("PersonPerformerFollowings")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("PersonPerformerFollowings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.Performer", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", "Parent")
                        .WithMany("Members")
                        .HasForeignKey("ParentId");

                    b.HasOne("ConcertTicketAPI.Models.Performer.PerformerSubCategory", "SubCategory")
                        .WithMany("Performers")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerImages", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", "Performer")
                        .WithMany("Images")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerSubCategory", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Performer.PerformerCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.Person", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCity", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.PersonCompanies", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "Person")
                        .WithMany("Companies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.PersonCompaniesImages", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Person.PersonCompanies", "PersonCompanies")
                        .WithMany("Images")
                        .HasForeignKey("PersonCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonCompanies");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Phone.CountryPhoneCode", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", "Country")
                        .WithOne("PhoneCode")
                        .HasForeignKey("ConcertTicketAPI.Models.Phone.CountryPhoneCode", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.Venue", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCity", "City")
                        .WithMany("Venues")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.PersonCompanies", "CompanyOwner")
                        .WithMany("Venues")
                        .HasForeignKey("CompanyOwnerId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcertTicketAPI.Models.Person.Person", "PersonOwner")
                        .WithMany("Venues")
                        .HasForeignKey("PersonOwnerId");

                    b.HasOne("ConcertTicketAPI.Models.Location.LocationState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("CompanyOwner");

                    b.Navigation("Country");

                    b.Navigation("PersonOwner");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueImages", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Venue.Venue", "Venue")
                        .WithMany("Images")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueParking", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("Parking")
                        .HasForeignKey("EventId");

                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", null)
                        .WithMany("Parking")
                        .HasForeignKey("PerformerId");

                    b.HasOne("ConcertTicketAPI.Models.Venue.Venue", "Venue")
                        .WithMany("Parking")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueTicket", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Event.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId");

                    b.HasOne("ConcertTicketAPI.Models.Performer.Performer", null)
                        .WithMany("Tickets")
                        .HasForeignKey("PerformerId");

                    b.HasOne("ConcertTicketAPI.Models.Venue.VenueZones", "VenueZones")
                        .WithMany("Tickets")
                        .HasForeignKey("VenueZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VenueZones");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueWorkTime", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Venue.Venue", "Venue")
                        .WithMany("WorkTime")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueZones", b =>
                {
                    b.HasOne("ConcertTicketAPI.Models.Venue.Venue", "Venue")
                        .WithMany("Zones")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.Event", b =>
                {
                    b.Navigation("EventPerformers");

                    b.Navigation("EventTagMiddles");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("Parking");

                    b.Navigation("PersonEventFavorites");

                    b.Navigation("PersonEventFollowings");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventsTag", b =>
                {
                    b.Navigation("EventTagMiddles");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Event.EventSubCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationCity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationCountry", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PhoneCode");

                    b.Navigation("States");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Location.LocationState", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.Performer", b =>
                {
                    b.Navigation("EventPerformers");

                    b.Navigation("Images");

                    b.Navigation("Members");

                    b.Navigation("Parking");

                    b.Navigation("PersonPerformerFavorites");

                    b.Navigation("PersonPerformerFollowings");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Performer.PerformerSubCategory", b =>
                {
                    b.Navigation("Performers");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.Person", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Events");

                    b.Navigation("PersonEventFavorites");

                    b.Navigation("PersonEventFollowings");

                    b.Navigation("PersonPerformerFavorites");

                    b.Navigation("PersonPerformerFollowings");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Person.PersonCompanies", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.Venue", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("Parking");

                    b.Navigation("WorkTime");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("ConcertTicketAPI.Models.Venue.VenueZones", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
